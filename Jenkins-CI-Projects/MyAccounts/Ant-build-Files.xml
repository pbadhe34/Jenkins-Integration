<project name="Ant-Build-Files" default="Call-Ant-Tasks" basedir=".">
	<property name="app.name" value="test" />
	<property name="build" value="build" />
	<property name="build.dir" value="bin" />
	<property name="source.dir" value="src" />
	<property name="reports" location="reports"/>

<!--For better all usage put the junit jar in ant/lib directory-->
	<path id="libraries">
		<pathelement location="${java.home}/../lib/tools.jar" />
		<fileset dir="${basedir}/lib">
			<include name="junit-4.2.jar" />
		</fileset>
	</path>

<target name="Call-Ant-Tasks" description="Invokes different Ant targets from multiple build xml files.">

	<!--Invoke the target from same build xml-->
	
<antcall target="BatchTest">
</antcall> 

<!--Invoke the target from another build xml-->	

<ant antfile="build-analyze.xml" inheritAll="true" inheritRefs="true" target="clean"></ant>

<ant antfile="build-analyze.xml" inheritAll="true" inheritRefs="true" target="RunCheckstyle"></ant>


<ant antfile="Sonar-Analyze.xml" inheritAll="true" inheritRefs="true"></ant>

		 
    </target>



	<antversion property="antversion"/>
	
	<target name="clean" description="Delete all result dirs to start with a clean build.">
		<delete dir="${build.dir}" />
		<delete dir="${build}" />
		<delete dir="${reports}/raw" />			
		<delete dir="${reports}/batch" />	
		<delete dir="${reports}" />			
		 
    </target>

	<target name="compileJava" depends="clean">
	    <mkdir dir="${build}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${reports}" />
		<mkdir dir="${reports}/raw" />
		 
		
		<echo message="Compiling Java Domain Source files "/>
		<echo message="Current Ant version is  ${ant.version}"/>
		<echo message="Ant installation dir is ${ant.home}"/>

		<javac includeantruntime='true' srcdir="${source.dir}" destdir="${build.dir}">
		    <classpath>				  
				<pathelement location="${basedir}/lib/junit-4.2.jar" />
			</classpath>

			<include name="com/bank/*.java" />
			<include name="com/company/*.java" />
			<include name="app/*.java" />
		</javac>
	</target>



	<target name="compiletests" depends="compileJava">
		<echo message="Compiling Java Test source Classes"/>		 
		 
		<javac includeantruntime='true' srcdir="src/test" destdir="${build.dir}">
			<classpath>				  
				<pathelement location="${basedir}/lib/junit-4.2.jar" />
			</classpath>
			<include name="com/bank/*.java" />
		</javac>
	</target>

	<target name="JavaTest" depends="compiletests">
		<echo message="Running the Junit Test.."/>
		 
		<java fork="yes" classname="junit.textui.TestRunner" taskname="junit" 
			failonerror="true">
			<arg value="test.com.bank.AllJUnitTests" />
			<classpath>
				<pathelement location="${basedir}/lib/junit-4.2.jar" />				 
				<pathelement location="bin" />
				<pathelement path="" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>


	<target name="Junit4-SuiteTest" depends="compiletests">
		<echo message="Running the Junit4-SuiteTest Target..">
		</echo>
		<junit printsummary="yes" fork="yes" haltonfailure="no" showoutput="yes">

			<classpath>
				<pathelement location="${basedir}/lib/junit-4.2.jar" />				 
				<pathelement location="${build.dir}" />
				<pathelement path="" />
				<pathelement path="${java.class.path}" />
			</classpath>
			 
			<test name="test.com.bank.Junit4TestSuite" haltonfailure="no" outfile="test-result" 
				todir="${reports}">
			     <formatter type="xml"/> 
			 </test>   	 
		</junit>

	</target>

	 

	<target name="AllTests" depends="compiletests">
		<echo message="Running the Junit All Tests.."/>		 
		
		<junit printsummary="yes" fork="yes" haltonfailure="yes" showoutput="yes" 
		haltonerror="yes" >
			<classpath>	
				<pathelement location="${basedir}/lib/junit-4.2.jar" />		
				<pathelement location="${build.dir}" />
				<pathelement path="" />
				<pathelement path="${java.class.path}" />
			</classpath>
			 
			<test name="test.com.bank.AllJUnitTests" haltonfailure="no" outfile="test-result" 
				todir="${reports}">
			     <formatter type="xml"/> 
			 </test>      
			  
		</junit>
	</target>
	
	<target name ="gen-report" depends="Junit4-SuiteTest">
			<junitreport  todir="${reports}">
			  <fileset dir="${reports}">
			    <include name="test-result.xml"/>
			  </fileset>
			  <report format="frames" todir="${reports}/html"/>
			</junitreport>
	  </target>
	
	<target name ="Gen_Report_Styled" depends="AllTests">
			<junitreport todir="${reports}">
			  <fileset dir="${reports}">
			    <include name="test-result.xml"/>
			  </fileset>
			  <report todir="${reports}/custom"   styledir="styles"   format="frames">
	               <!--param name="key1" expression="value1"/>
	               <param name="key2" expression="value2"/-->
	               </report>
			</junitreport>
	  </target>
	
	<target name="BatchTest" depends="compiletests" description="run the batch test and generate xml outputs of test results" >
		   <echo message="Running the Junit BatchTest.."/>	    
				
			<junit printsummary="yes" haltonfailure="no" haltonerror="no" showoutput="yes" >
				   <classpath>					   	   
						<pathelement location="${build.dir}" />	
					    <pathelement location="${basedir}/lib/junit-4.2.jar" />
					    <pathelement path="${java.class.path}" />											
	                 </classpath>  	                                
			
	 		  <batchtest fork="yes" todir="${reports}/raw">
	 		   	<formatter type="xml"/>
			    <fileset dir="${build.dir}">
	                 <!--Specify the java test files with package test-->
			      <include name="/test/com/bank/*.*"/>
			    </fileset>

			  </batchtest>
			</junit>	
		</target>
	
	<target name ="BatchTest_Report" depends="BatchTest">
	    
	          <mkdir dir="${reports}/batch" />
	          
				<!-- <junitreport todir="${reports}/raw">
				  <fileset dir="${reports}/raw">
				    <include name="*.xml"/>
				  </fileset>
				  <report todir="${reports}/batch"   styledir="styles"   format="frames">
		               param name="key1" expression="value1"/>
		               <param name="key2" expression="value2"/
		               </report>
			</junitreport> -->
			
			<junitreport  todir="${reports}/raw">
			  <fileset dir="${reports}/raw">
			      <include name="*.xml"/>
			  </fileset>
			  <report format="frames" todir="${reports}/batch"/>
			</junitreport>
		  </target>

  <target name="BuildJar" depends="compileJava">    
      
      <echo message="Running the Jar task."/>		 
		
    <jar destfile="${build}/app.jar"
       basedir="${build.dir}"
       includes="app/*.class, com/bank/*.class, com/company/*.class" />
  </target>


</project>

